import { catchNewError } from "lib/errors/errorHandling";
import fetch from "node-fetch";

export async function getSauceNaoSource(token: string, imgUrl: string) {
   const fetchData = await fetch(
      `https://saucenao.com/search.php?output_type=2&url=${imgUrl}&api_key=${token}&numres=7`,
   )
      .then(async (response) => {
         const result = await response.text();
         if (!response.ok) {
            const json = (await JSON.parse(result)) as Query;
            const status = json.header.status;

            if (status === -1) return { status: ResponseType.invalidToken };
            if (status === -2) return { status: ResponseType.tooManyRequests };
            else throw catchNewError(response);
         } else {
            const json = (await JSON.parse(result)) as Query;

            return {
               status: ResponseType.ok,
               content: json,
            };
         }
      })
      .catch((error) => {
         throw error;
      });

   if (fetchData.status !== 0) {
      return { status: fetchData.status };
   } else {
      const data = fetchData.content!;

      const obj: GetSauceData = {
         long_remaining: data.header.long_remaining,
         short_remaining: data.header.short_remaining,
         results_returned: data.header.results_returned,
         results: data.results,
      };

      return {
         status: ResponseType.ok,
         content: obj,
      };
   }
}

interface GetSauceData {
   long_remaining: number;
   short_remaining: number;
   results_returned: number;
   results: Result[];
}

export async function testSauceNaoToken(token: string) {
   const fetchData = await fetch(
      `https://saucenao.com/search.php?db=9&output_type=2&url=https://cdn.donmai.us/sample/6b/15/__leonardo_watch_and_chain_sumeragi_kekkai_sensen_drawn_by_oda_takayuki__sample-6b1507e103a6cc3b0fdcea07bf8cda29.jpg&api_key=${token}&numres=1`,
   )
      .then(async (response) => {
         const result = await response.text();
         if (!response.ok) {
            const json = (await JSON.parse(result)) as Query;
            const status = json.header.status;

            if (status === -1) return { status: ResponseType.invalidToken };
            if (status === -2) return { status: ResponseType.tooManyRequests };
            else throw catchNewError(response);
         } else {
            const json = (await JSON.parse(result)) as Query;
            const data = json.header;

            const obj: SuccessData = {
               account_type: data.account_type,
               short_limit: data.short_limit,
               long_limit: data.long_limit,
               long_remaining: data.long_remaining,
               short_remaining: data.short_remaining,
            };

            return {
               status: ResponseType.ok,
               content: obj,
            };
         }
      })
      .catch((error) => {
         throw error;
      });

   return fetchData;
}

interface SuccessData {
   account_type: string;
   short_limit: string;
   long_limit: string;
   long_remaining: number;
   short_remaining: number;
}

export enum ResponseType {
   ok = 0,
   invalidToken = 1,
   tooManyRequests = 2,
}

// Generated by https://quicktype.io

export interface Query {
   header: QueryHeader;
   results: Result[];
}

export interface QueryHeader {
   user_id: string;
   account_type: string;
   short_limit: string;
   long_limit: string;
   long_remaining: number;
   short_remaining: number;
   status: number;
   results_requested: number;
   index: { [key: string]: Index };
   search_depth: string;
   minimum_similarity: number;
   query_image_display: string;
   query_image: string;
   results_returned: number;
}

export interface Index {
   status: number;
   parent_id: number;
   id: number;
   results: number;
}

export interface Result {
   header: ResultHeader;
   data: Data;
}

export interface Data {
   ext_urls: string[];
   pixiv_id: number;
   danbooru_id: number;
   gelbooru_id: number;
   sankaku_id: number;
   member_name: string;
   member_id: number;
   title: string;
   creator: string;
   material: string;
   characters: string;
}

export interface ResultHeader {
   similarity: string;
   thumbnail: string;
   index_id: number;
   index_name: string;
   dupes: number;
   hidden: number;
}
